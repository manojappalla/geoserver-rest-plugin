# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoserverPublishDialog
                                 A QGIS plugin
 This plugin allows users to publish shapefiles in geoserver
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-07-27
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Manoj Appalla
        email                : smappalla@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from geo.Geoserver import Geoserver

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geoserverPublish_dialog_base.ui'))


class GeoserverPublishDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GeoserverPublishDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # CREATE SIGNALS
        self.authenticateGeoserverBtn.clicked.connect(self.evt_authenticateGeoserver_clicked)
        self.createWorkspaceBtn.clicked.connect(self.evt_createWorkspace_clicked)
        self.publishBtn.clicked.connect(self.evt_publish_clicked)
        self.openShapefileBtn.clicked.connect(self.evt_openShapefile_clicked)

    def evt_authenticateGeoserver_clicked(self):
        global geo
        geo = Geoserver(self.geoserverUrl.text(), username=self.geoserverUsername.text(), password=self.geoserverPassword.text())
        self.workspaceGbx.setEnabled(True)

    def evt_createWorkspace_clicked(self):
        msg = QMessageBox()
        msg.setText(geo.create_workspace(workspace=self.workspaceName.text()))
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        self.geoserverPublishGbx.setEnabled(True)

    def evt_openShapefile_clicked(self):
        global fn
        fn, chk = QFileDialog.getOpenFileName(self, "Open Shapefile", "/Users/saimanojappalla/Desktop", "Shape Files (*.shp)")
        self.shapefilePath.setText(fn)

    def evt_publish_clicked(self):
        name = fn.split('/')[-1].split('.')[0]
        geo.create_datastore(name=self.storeName.text(),
                             path=self.shapefilePath.text(),
                             workspace=self.workspaceNameCreatedBefore.text())

        geo.publish_featurestore(workspace=self.workspaceNameCreatedBefore.text(), store_name=self.storeName.text(), pg_table=name)